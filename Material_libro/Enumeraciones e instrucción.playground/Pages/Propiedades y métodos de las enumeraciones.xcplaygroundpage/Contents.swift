/*:
## Propiedades y m√©todos de las enumeraciones

 En la lecci√≥n Estructuras, aprendiste a definir propiedades y m√©todos en una struct. Tambi√©n puedes definirlos en una enum. Esto puede ser muy √∫til para proporcionar acciones adicionales.
 
 Por ejemplo, puedes tener una propiedad que devuelva una cadena para cada valor que se muestre al usuario:
 */
enum LunchChoice {
    case pasta, burger, soup

    var emoji: String {
        switch self {
        case .pasta:
            return "üçù"
        case .burger:
            return "üçî"
        case .soup:
            return "üç≤"
        }
    }
}
let lunch = LunchChoice.pasta
lunch.emoji
/*:
 La palabra clave `self` se usa en m√©todos y propiedades calculadas y hace referencia a la instancia que se est√° pidiendo para el valor de propiedad.
 
 Podr√≠as tener un m√©todo que te permitiera comparar dos enums. Por ejemplo, en un juego de cartas como el bridge, las figuras est√°n clasificadas de esta forma, con los puntajes m√°s altos en la parte superior:

- Pica
- Coraz√≥n
- Diamante
- Tr√©bol

 Esta enum representa las figuras y te indica si una figura vence a la otra:
 */
enum Suit {
    case spades, hearts, diamonds, clubs

    var rank: Int {
        switch self {
        case .spades: return 4
        case .hearts: return 3
        case .diamonds: return 2
        case .clubs: return 1
        }
    }

    func beats(_ otherSuit: Suit) -> Bool {
        return self.rank > otherSuit.rank
    }
}

let oneSuit = Suit.spades
let otherSuit = Suit.clubs
oneSuit.beats(otherSuit)
oneSuit.beats(oneSuit)

/*:
 - callout(Experimento): Agrega una propiedad a la enum Suit (figura) que devuelva el emoji apropiado para cada elemento ‚Äúcase‚Äù: ‚ô†Ô∏è‚ù§Ô∏è‚ô¶Ô∏è‚ô£Ô∏è

 A continuaci√≥n, resume lo que aprendiste.
 
[Anterior](@previous)  |  p√°gina 15 de 21  |  [Siguiente: Resumen](@next)
 */